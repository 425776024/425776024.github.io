(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{451:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[s._v("init")]),s._v("、"),a("strong",[s._v("new")]),s._v(" .....")])]),s._v(" "),a("h1",{attrs:{id:"python魔法方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python魔法方法"}},[s._v("#")]),s._v(" python魔法方法")]),s._v(" "),a("h2",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[s._v("#")]),s._v(" 构造方法")]),s._v(" "),a("p",[s._v("1."),a("code",[s._v("__init__")]),s._v("：指明一个对象初始化的行为，它获取任何传给构造器的参数")]),s._v(" "),a("p",[s._v("2.调用"),a("code",[s._v("x = SomeClass()")]),s._v(" 的时候， "),a("code",[s._v("__init__")]),s._v(" 并不是第一个被调用的方法，事实上，第一个被调用的是 "),a("code",[s._v("__new__")])]),s._v(" "),a("p",[s._v("3.对象的生命周期结束的时候， "),a("code",[s._v("__del__")]),s._v(" 会被调用")]),s._v(" "),a("h2",{attrs:{id:"比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[s._v("#")]),s._v(" 比较")]),s._v(" "),a("p",[a("code",[s._v("__eq__(self, other)")]),s._v("定义等于操作符(==)的行为。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("def __eq__(self, other): # 定义内置方法 ，判定类相等\n    return self.__dict__ == other.__dict__ # 判断的是两对象空间的属性值是否相等\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("__ne__(self, other)")]),s._v("定义不等于操作符(!=)的行为。")]),s._v(" "),a("p",[a("code",[s._v("__lt__(self, other)")]),s._v("定义小于操作符(<)的行为。")]),s._v(" "),a("p",[a("code",[s._v("__gt__(self, other)")]),s._v("定义大于操作符(>)的行为。")]),s._v(" "),a("p",[a("code",[s._v("__le__(self, other)")]),s._v("定义小于等于操作符(<)的行为。")]),s._v(" "),a("p",[a("code",[s._v("__ge__(self, other)")]),s._v("定义大于等于操作符(>)的行为。")]),s._v(" "),a("h2",{attrs:{id:"一元操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元操作"}},[s._v("#")]),s._v(" 一元操作")]),s._v(" "),a("p",[a("code",[s._v("__pos__(self)")]),s._v("实现取正操作，例如 "),a("code",[s._v("+some_object")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("__neg__(self)")]),s._v("实现取负操作，例如 "),a("code",[s._v("-some_object")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("__abs__(self)")]),s._v("实现内建绝对值函数 "),a("code",[s._v("abs()")]),s._v(" 操作。")]),s._v(" "),a("p",[a("code",[s._v("__invert__(self)")]),s._v("实现取反操作符 "),a("code",[s._v("~")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("__round__(self， n)")]),s._v("实现内建函数 "),a("code",[s._v("round()")]),s._v(" ，n 是近似小数点的位数。")]),s._v(" "),a("p",[a("code",[s._v("__floor__(self)")]),s._v("实现 "),a("code",[s._v("math.floor()")]),s._v(" 函数，即向下取整。")]),s._v(" "),a("p",[a("code",[s._v("__ceil__(self)")]),s._v("实现 "),a("code",[s._v("math.ceil()")]),s._v(" 函数，即向上取整。")]),s._v(" "),a("p",[a("code",[s._v("__trunc__(self)")]),s._v("实现 "),a("code",[s._v("math.trunc()")]),s._v(" 函数，即距离零最近的整数。")]),s._v(" "),a("h2",{attrs:{id:"算数操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算数操作"}},[s._v("#")]),s._v(" 算数操作")]),s._v(" "),a("p",[a("code",[s._v("__add__(self, other)")]),s._v("实现加法操作。")]),s._v(" "),a("p",[a("code",[s._v("__sub__(self, other)")]),s._v("实现减法操作。")]),s._v(" "),a("p",[a("code",[s._v("__mul__(self, other)")]),s._v("实现乘法操作。")]),s._v(" "),a("p",[a("code",[s._v("__floordiv__(self, other)")]),s._v("实现使用 "),a("code",[s._v("//")]),s._v(" 操作符的整数除法。")]),s._v(" "),a("p",[a("code",[s._v("__div__(self, other)")]),s._v("实现使用 "),a("code",[s._v("/")]),s._v(" 操作符的除法。")]),s._v(" "),a("p",[a("code",[s._v("__truediv__(self, other)")]),s._v("实现 "),a("code",[s._v("_true_")]),s._v(" 除法，这个函数只有使用 "),a("code",[s._v("from __future__ import division")]),s._v(" 时才有作用。")]),s._v(" "),a("p",[a("code",[s._v("__mod__(self, other)")]),s._v("实现 "),a("code",[s._v("%")]),s._v(" 取余操作。")]),s._v(" "),a("p",[a("code",[s._v("__divmod__(self, other)")]),s._v("实现 "),a("code",[s._v("divmod")]),s._v(" 内建函数。")]),s._v(" "),a("p",[a("code",[s._v("__pow__")]),s._v("实现 "),a("code",[s._v("**")]),s._v(" 操作符。")]),s._v(" "),a("p",[a("code",[s._v("__lshift__(self, other)")]),s._v("实现左移位运算符 <<"),a("code",[s._v(";")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("__rshift__(self, other)")]),s._v("实现右移位运算符>> 。")]),s._v(" "),a("p",[a("code",[s._v("__and__(self, other)")]),s._v("实现按位与运算符 "),a("code",[s._v("&")]),s._v(" 。")]),s._v(" "),a("p",[a("code",[s._v("__or__(self, other)")]),s._v("实现按位或运算符 "),a("code",[s._v("|")]),s._v(" 。")]),s._v(" "),a("p",[a("code",[s._v("__xor__(self, other)")]),s._v("实现按位异或运算符 "),a("code",[s._v("^")]),s._v(" 。")]),s._v(" "),a("h2",{attrs:{id:"反射算数运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射算数运算"}},[s._v("#")]),s._v(" 反射算数运算")]),s._v(" "),a("p",[s._v("some_object + other：是“常见”的加法；")]),s._v(" "),a("p",[s._v("反射是一样的意思，只不过是运算符交换了一下位置:other + some_object；")]),s._v(" "),a("p",[a("code",[s._v("__radd__(self, other)")]),s._v("实现反射加法操作。")]),s._v(" "),a("p",[a("code",[s._v("__rsub__(self, other)")]),s._v("实现反射减法操作。")]),s._v(" "),a("p",[a("code",[s._v("__rmul__(self, other)")]),s._v("实现反射乘法操作。")]),s._v(" "),a("p",[a("code",[s._v("__rfloordiv__(self, other)")]),s._v("实现使用 "),a("code",[s._v("//")]),s._v(" 操作符的整数反射除法")]),s._v(" "),a("h2",{attrs:{id:"增强赋值运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增强赋值运算"}},[s._v("#")]),s._v(" 增强赋值运算")]),s._v(" "),a("p",[s._v("a += b")]),s._v(" "),a("p",[a("code",[s._v("__iadd__(self, other)")]),s._v("实现加法赋值操作。")]),s._v(" "),a("p",[a("code",[s._v("__isub__(self, other)")]),s._v("实现减法赋值操作。")]),s._v(" "),a("p",[s._v("..........")]),s._v(" "),a("h2",{attrs:{id:"类型转换操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换操作"}},[s._v("#")]),s._v(" 类型转换操作")]),s._v(" "),a("p",[a("code",[s._v("__int__(self)")]),s._v("实现到int的类型转换。")]),s._v(" "),a("p",[a("code",[s._v("__long__(self)")]),s._v("实现到long的类型转换。")]),s._v(" "),a("p",[a("code",[s._v("__float__(self)")]),s._v("实现到float的类型转换。")]),s._v(" "),a("p",[a("code",[s._v("__complex__(self)")]),s._v("实现到complex的类型转换。")]),s._v(" "),a("p",[a("code",[s._v("__oct__(self)")]),s._v("实现到八进制数的类型转换。")]),s._v(" "),a("p",[a("code",[s._v("__hex__(self)")]),s._v("实现到十六进制数的类型转换。")]),s._v(" "),a("h2",{attrs:{id:"类的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的表示"}},[s._v("#")]),s._v(" 类的表示")]),s._v(" "),a("p",[a("code",[s._v("__str__(self)")]),s._v("定义对类的实例调用 "),a("code",[s._v("str()")]),s._v(" 时的行为， 产生人类可读的输出。")]),s._v(" "),a("p",[a("code",[s._v("__repr__(self)")]),s._v("将对象转化为供解释器读取的形式，产生机器可读的输出，方便print。")]),s._v(" "),a("h2",{attrs:{id:"访问控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问控制"}},[s._v("#")]),s._v(" 访问控制")]),s._v(" "),a("p",[a("code",[s._v("__getattr__(self, name)")]),s._v("当用户试图访问一个根本不存在（或者暂时不存在）的属性时，你可以通过这个魔法方法来定义类的行为。这个可以用于捕捉错误的拼写并且给出指引，使用废弃属性时给出警告，只有当试图访问不存在的属性时它才会被调用，所以这不能算是一个真正的封装的办法。")]),s._v(" "),a("p",[a("code",[s._v("__setattr__(self, name, value)")]),s._v("它允许你自定义某个属性的赋值行为。")]),s._v(" "),a("p",[a("code",[s._v("__delattr__(self, name)")]),s._v("这个魔法方法和 "),a("code",[s._v("__setattr__")]),s._v(" 几乎相同，只不过它是用于处理删除属性时的行为。")]),s._v(" "),a("p",[a("code",[s._v("使用注意!!!!")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 错误形式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__setattr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因为每次属性幅值都要调用 __setattr__()，所以这里的实现会导致递归")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里的调用实际上是 self.__setattr('name', value)。因为这个方法一直")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在调用自己，因此递归将持续进行，直到程序崩溃")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正确形式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__setattr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__dict__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 __dict__ 进行赋值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义自定义行为")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"自定义序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义序列"}},[s._v("#")]),s._v(" 自定义序列")]),s._v(" "),a("p",[s._v("让Python类表现得像是内建序列类型（字典，元组，列表，字符串等）")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如：想实现一个不可变容器，需要定义 "),a("code",[s._v("__len__")]),s._v(" 和 "),a("code",[s._v("__getitem__")]),s._v("  ，可变容器的协议除了上面提到的两个方法之外，还需要定义 "),a("code",[s._v("__setitem__")]),s._v(" 和 "),a("code",[s._v("__delitem__")]),s._v(" 。")])]),s._v(" "),a("li",[a("p",[s._v("想让你的对象可以迭代，你需要定义 "),a("code",[s._v("__iter__")]),s._v(" ，这个方法返回一个迭代器，需要定义 "),a("code",[s._v("__iter__")]),s._v(" （返回它自己）和 "),a("code",[s._v("next")]),s._v(" 方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__len__(self)")]),s._v("返回容器的长度，可变和不可变类型都需要实现。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__getitem__(self, key)")]),s._v("定义对容器中某一项使用 "),a("code",[s._v("self[key]")]),s._v(" 的方式进行"),a("code",[s._v("读取操作")]),s._v("时的行为。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__setitem__(self, key)")]),s._v("定义对容器中某一项使用 "),a("code",[s._v("self[key]")]),s._v(" 的方式进行"),a("code",[s._v("赋值操作")]),s._v("时的行为，它是可变容器类型必须实现的一个方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__iter__(self, key)")]),s._v("它应该返回当前容器的一个迭代器，最常见的是使用 "),a("code",[s._v("iter()")]),s._v(" 函数调用，以及在类似 "),a("code",[s._v("for x in container:")]),s._v(" 的循环中被调用。迭代器是他们自己的对象，需要定义 "),a("code",[s._v("__iter__")]),s._v("方法并在其中返回自己。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__reversed__(self)")]),s._v("定义了对容器使用 "),a("code",[s._v("reversed()")]),s._v(" 内建函数时的行为。应该返回一个反转之后的序列。当你的序列类是有序时，类似列表和元组，再实现这个方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__contains__(self, item)")]),s._v("定义了使用 "),a("code",[s._v("in")]),s._v(" 和 "),a("code",[s._v("not in")]),s._v(" 进行成员测试时类的行为，如果 "),a("code",[s._v("__contains__")]),s._v(" 没有定义，Python就会迭代整个序列，如果找到了需要的一项就返回 "),a("code",[s._v("True")]),s._v(" 。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__missing__(self ,key)")]),s._v("它定义了当试图访问一个字典中不存在的键时的行为（目前为止是指字典的实例，例如我有一个字典 "),a("code",[s._v("d")]),s._v(" ， "),a("code",[s._v('"george"')]),s._v(" 不是字典中的一个键，当试图访问 "),a("code",[s._v("d[\"george']")]),s._v(" 时就会调用 "),a("code",[s._v('d.__missing__("george")')]),s._v(" ）")])])]),s._v(" "),a("p",[s._v("例子：实现了一些函数式结构的列表")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FunctionalList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''一个列表的封装类，实现了一些额外的函数式\n    方法，例如head, tail, init, last, drop和take。'''")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" values"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" values "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" values\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__len__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__getitem__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果键的类型或值不合法，列表会返回异常")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__setitem__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__delitem__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__iter__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 迭代器")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("iter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__reversed__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("reversed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得第一个元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得除第一个元素外的所有元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("valuse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得除最后一个元素外的所有元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("last")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得最后一个元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("drop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得除前n个元素外的所有元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得前n个元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br")])]),a("h2",{attrs:{id:"反射-instancecheck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射-instancecheck"}},[s._v("#")]),s._v(" 反射_"),a("em",[s._v("instancecheck")]),s._v("_")]),s._v(" "),a("p",[a("code",[s._v("__instancecheck__(self, instance)")]),s._v("检查一个实例是否是你定义的类的一个实例（例如 "),a("code",[s._v("isinstance(instance, class)")]),s._v(" ）。")]),s._v(" "),a("p",[a("code",[s._v("__subclasscheck__(self, subclass)")]),s._v("检查一个类是否是你定义的类的子类（例如 "),a("code",[s._v("issubclass(subclass, class)")]),s._v(" ）。")]),s._v(" "),a("h2",{attrs:{id:"上下文管理-enter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文管理-enter"}},[s._v("#")]),s._v(" 上下文管理_"),a("em",[s._v("enter")]),s._v("_")]),s._v(" "),a("p",[a("code",[s._v("with")]),s._v(" 声明创建时，上下文管理器允许类做一些设置和清理工作。上下文管理器的行为由下面两个魔法方法所定义：")]),s._v(" "),a("p",[a("code",[s._v("__enter__(self)")]),s._v("定义使用 "),a("code",[s._v("with")]),s._v(" 声明创建的语句块最开始上下文管理器应该做些什么。")]),s._v(" "),a("p",[a("code",[s._v("__enter__")]),s._v(" 的返回值会赋给 "),a("code",[s._v("with")]),s._v(" 声明的目标，也就是 "),a("code",[s._v("as")]),s._v(" 之后的名字。")]),s._v(" "),a("p",[a("code",[s._v("__exit__(self, exception_type, exception_value, traceback)")]),s._v("定义当 "),a("code",[s._v("with")]),s._v(" 声明语句块执行完毕（或终止）时上下文管理器的行为。它可以用来处理异常，进行清理，或者做其他应该在语句块结束之后立刻执行的工作。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'实例化一个对象'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__enter__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'进入'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__exit__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exc_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exc_val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exc_tb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'退出'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'正在执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''\n实例化一个对象\n进入\n正在执行\n退出\n'''")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h2",{attrs:{id:"拷贝copy-copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝copy-copy"}},[s._v("#")]),s._v(" 拷贝copy.copy")]),s._v(" "),a("p",[s._v("copy.copy 浅拷贝 只拷贝父对象，不会拷贝对象的内部的子对象。")]),s._v(" "),a("p",[s._v("copy.deepcopy 深拷贝 拷贝对象及其子对象")]),s._v(" "),a("p",[a("code",[s._v("__copy__(self)")]),s._v("返回一个对象的浅拷贝，这意味着拷贝出的实例是全新的，然而里面的数据全都是引用的。也就是说，对象本身是拷贝的，但是它的数据还是引用的（所以浅拷贝中的数据更改会影响原对象）。")]),s._v(" "),a("p",[a("code",[s._v("__deepcopy__(self, memodict=)")]),s._v("实例使用 "),a("code",[s._v("copy.deepcopy()")]),s._v(" 时的行为。 "),a("code",[s._v("copy.deepcopy()")]),s._v(" 返回一个对象的深拷贝，这个对象和它的数据全都被拷贝了一份。")])])}),[],!1,null,null,null);t.default=e.exports}}]);